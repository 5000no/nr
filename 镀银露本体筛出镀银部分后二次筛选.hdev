<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.11.1.0">
<procedure name="main">
<interface/>
<body>
<c>* 设置文件夹路径</c>
<l>FolderPath := 'H:/NR数据集/采图（cdd1-cdd6）已筛选/cdd1筛选/合格品' </l>
<c></c>
<c>* 获取文件夹中的所有图像文件</c>
<l>list_files(FolderPath, ['files'], Files)</l>
<l>tuple_length(Files, Length)</l>
<c></c>
<l>for I := 0 to Length - 1 by 1</l>
<c></c>
<c>    * 初始化结果为NG(1)</c>
<l>    Result := 1   </l>
<c>    * 默认有缺陷/异常</c>
<c></c>
<c>    * 获取当前图像路径</c>
<l>    tuple_select(Files, I, ImagePath)   </l>
<c></c>
<l>    try</l>
<c>        * 读取图像</c>
<l>        read_image(Image, ImagePath)</l>
<c>        </c>
<c>        * 获取图像尺寸</c>
<l>        get_image_size(Image, Width, Height)</l>
<c></c>
<c>        * 转换为灰度图像</c>
<l>        rgb1_to_gray(Image, GrayImage)</l>
<c></c>
<c>        * 分解RGB通道</c>
<l>        decompose3(Image, R, G, B)</l>
<c></c>
<c>        * 高斯滤波去噪</c>
<l>        gauss_image(R, SmoothedImage, 5)</l>
<c></c>
<c>        * 选择深度值区域</c>
<l>        threshold(SmoothedImage, RegionThreshold1, 90, 180)</l>
<c></c>
<c>        * 连通区域分析</c>
<l>        connection(RegionThreshold1, ConnectedRegions)</l>
<c>        </c>
<c>        * 检查是否有区域被检测到</c>
<l>        count_obj(ConnectedRegions, NumRegions)</l>
<l>        if (NumRegions == 0)</l>
<c>            * 没有检测到任何区域，判定为NG，继续下一张</c>
<l>            continue</l>
<l>        endif</l>
<c></c>
<c>        * 闭运算连接相邻镀银碎片</c>
<l>        closing_rectangle1(ConnectedRegions, ClosedRegions, 10, 10)</l>
<c></c>
<c>        * 再次连通</c>
<l>        connection(ClosedRegions, ConnectedRegions2)</l>
<c></c>
<c>        * 筛选面积较大的区域（去除小碎点）</c>
<l>        select_shape(ConnectedRegions2, LargeRegions, 'area', 'and', 100000, 9999999999)</l>
<c>        </c>
<c>        * 检查是否有大区域</c>
<l>        count_obj(LargeRegions, NumLargeRegions)</l>
<l>        if (NumLargeRegions == 0)</l>
<l>            continue</l>
<l>        endif</l>
<c></c>
<c>        * 宽度筛选（去除细长条区域）</c>
<l>        select_shape(LargeRegions, SilverCandidate, 'width', 'and', 15, 99999)</l>
<c>        </c>
<c>        * 检查筛选后区域</c>
<l>        count_obj(SilverCandidate, NumCandidates)</l>
<l>        if (NumCandidates == 0)</l>
<l>            continue</l>
<l>        endif</l>
<c></c>
<c>        * 再做一次开运算去除毛刺</c>
<l>        opening_rectangle1(SilverCandidate, SilverCleaned, 5, 5)</l>
<c></c>
<c>        * ------------------- 填充选中的镀银区域 -------------------</c>
<l>        fill_up(SilverCleaned, SilverFilled)</l>
<c>        </c>
<c>        * 检查填充后区域</c>
<l>        count_obj(SilverFilled, NumFilled)</l>
<l>        if (NumFilled == 0)</l>
<l>            continue</l>
<l>        endif</l>
<c></c>
<c>        * ------------------- 自动找外接矩形 + 动态裁剪左右边带 -------------------</c>
<c>        * 获取最小外接旋转矩形参数</c>
<l>        smallest_rectangle2(SilverFilled, Row, Column, PhiRect, Length1, Length2)</l>
<c></c>
<c>        * 根据短边确定旋转角度，保证短边作为主方向</c>
<l>        if (Length1 &gt; Length2)</l>
<l>            Phi := PhiRect + rad(90)</l>
<l>        else</l>
<l>            Phi := PhiRect</l>
<l>        endif</l>
<c></c>
<c>        * 创建仿射变换矩阵，将区域旋转为水平（角度设置为 0）</c>
<l>        vector_angle_to_rigid(Row, Column, Phi, Row, Column, 0, HomMat2D)</l>
<c></c>
<c>        * 对图像应用仿射变换（进行旋转对齐）</c>
<l>        affine_trans_image(Image, RotatedImage, HomMat2D, 'constant', 'false')</l>
<c></c>
<c>        * 对填充区域也应用相同的仿射变换</c>
<l>        affine_trans_region(SilverFilled, RotatedRegion, HomMat2D, 'nearest_neighbor')</l>
<c>        </c>
<c>        * 生成左裁剪带</c>
<l>        WidthBand := 10  </l>
<c>        * 裁剪带宽度（可根据需要调整）</c>
<l>        gen_rectangle2(LeftBand, Row, Column - Length1 + WidthBand / 2, 0, WidthBand / 2, Length2 + 20)</l>
<c></c>
<c>        * 生成右裁剪带</c>
<l>        gen_rectangle2(RightBand, Row, Column + Length1 - WidthBand / 2, 0, WidthBand / 2, Length2 + 20)</l>
<c></c>
<c>        * 合并左右裁剪带</c>
<l>        union2(LeftBand, RightBand, EdgeMasks)</l>
<c></c>
<c>        * 剪掉边带，断开与边界的连通</c>
<l>        difference(RotatedRegion, EdgeMasks, SilverDisconnected)</l>
<c></c>
<c>        * 重新连通区域</c>
<l>        connection(SilverDisconnected, ConnectedRegionsFinal)</l>
<c></c>
<c>        * 选面积较大的区域（去除小碎点）</c>
<l>        select_shape(ConnectedRegionsFinal, LargeSilverRegions, 'area', 'and', 500, 999999)</l>
<c></c>
<c>        * 获取区域个数</c>
<l>        count_obj(LargeSilverRegions, RegionCount)</l>
<l>        if (RegionCount == 0)</l>
<l>            continue</l>
<l>        endif</l>
<c></c>
<c>        * 只保留面积最大的前2个区域</c>
<l>        if (RegionCount &gt;= 2)</l>
<l>            select_obj(LargeSilverRegions, Region1, 1)</l>
<l>            select_obj(LargeSilverRegions, Region2, 2)</l>
<l>            union2(Region1, Region2, SilverFinal)</l>
<l>        else</l>
<l>            select_obj(LargeSilverRegions, SilverFinal, 1)</l>
<l>        endif</l>
<c></c>
<c>        * 填充</c>
<l>        fill_up(SilverFinal, SilverFinal)</l>
<c>        </c>
<c>        * 关键修正点：正确初始化SilverROI变量</c>
<c>        * 限制到镀银区域 - 使用旋转后的SmoothedImage（RotatedImage）</c>
<l>        reduce_domain(RotatedImage, SilverFinal, SilverROI)</l>
<c></c>
<c>        * ----------------- 缺陷检测部分 -----------------</c>
<c>        * 阈值分割缺陷（灰度范围缩小）</c>
<l>        threshold(SilverROI, DefectCandidates, 0, 30)</l>
<c></c>
<c>        * 连通分析</c>
<l>        connection(DefectCandidates, ConnectedDefects)</l>
<c></c>
<c>        * 面积筛选，剔除小噪点</c>
<l>        select_shape(ConnectedDefects, FilteredDefects, 'area', 'and', 50, 999999)</l>
<c></c>
<c>        * 判断是否有缺陷</c>
<l>        count_obj(FilteredDefects, DefectCount)</l>
<c></c>
<c>        * 只有当确实没有缺陷时才设为OK</c>
<l>        if (DefectCount == 0)</l>
<l>            Result := 0  </l>
<c>            * 无缺陷才设为OK</c>
<l>        endif</l>
<c>        </c>
<c>        * 测试用停止点</c>
<l>        * stop()</l>
<c>        </c>
<l>    catch (Exception)</l>
<c>        * 捕获任何异常，图片判定为NG</c>
<l>        Result := 1</l>
<l>    endtry</l>
<c>    </c>
<c>    * 这里可以写代码记录检测结果，示例：</c>
<c>    * write_result_to_file(ImagePath, Result)</c>
<c>    </c>
<l>endfor</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
